#
#
# DO NOT EDIT THIS FILE.
# This file was autogenerated by python_on_wheels.
# Any manual edits may be overwritten without notification.
#
# 

# date created:     2011-04-27


import sys
import os
from mako.template import Template
from mako.lookup import TemplateLookup


sys.path.append(os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../models" )) )
sys.path.append(os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../lib" )) )
sys.path.append(os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "../config" )) )
import pow
import powlib
import PowObject

class BaseController(PowObject.PowObject):
    #model = None
    #session = None
    #modelname = "None"
    #current_action = "list"
    moddir="/../views/mako_modules"
    #mylookup = None
    
    
    def __init__(self):
        
        self.mylookup = TemplateLookup(directories=[os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)),"../views/")),
                    os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)),"../views/layouts/")),
                    os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)),"../views/stylesheets/"))
                    ] )
        # example how to instanciate the model:
        if self.modelname == None or self.modelname == "None":
            self.model = None
            self.session = None
        else:
            self.model = powlib.load_class(self.modelname, self.modelname)
            self.session = self.model.pbo.getSession()
       
        # put the actions that require a login into login_required list.
        self.login_required = []
        # put the actions you implemented but do not want to be callable via web request 
        # into the locked_actions list
        self.locked_actions = []
        self.current_action = "NOT_DEFINED"
        
        
    def index(self):
        return self.render()
        
    def render(self, **kwargs):
        powdict = kwargs["powdict"]
        kwargs["powdict"] = powdict
        kwargs["template"] = pow.global_conf["DEFAULT_TEMPLATE"] 

        special_tmpl = None
        if kwargs.has_key("special_tmpl"):
            special_tmpl = kwargs["special_tmpl"]
            del kwargs["special_tmpl"]

        if self.current_action not in self.locked_actions:
            if self.access_granted(**kwargs) == True:
                first_part = os.path.join( os.path.dirname(os.path.abspath(__file__)),"../views/")
                if special_tmpl == None:
                    fname =  self.modelname + "_" + self.current_action +".tmpl"
                else:
                    fname =  special_tmpl
                mytemplate = self.mylookup.get_template(fname)
                #mytemplate = Template(filename=fname, lookup=self.mylookup)
                return mytemplate.render(**kwargs)
            else:
                #self.setCurrentAction("login")
                kwargs["powdict"]["FLASHTEXT"] = "You need to be logged in to access method: %s" % (str(self.current_action))
                kwargs["powdict"]["FLASHTYPE"] = "error"
                fname = os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)),"../views/App_login.tmpl"))
                mytemplate = Template(filename=fname, lookup=self.mylookup)
                return mytemplate.render(**kwargs)
        else:
            kwargs["ERROR_INFO"] = "The action you have called (", self.current_action, "is locked from outside access."
            return self.error(**kwargs)
            
    
    def redirect(self, action, **kwargs):
        self.setCurrentAction(action)
        return eval("self." + action + "(**kwargs)")
    
    def access_granted(self,**kwargs):
        # returns true if access is ok, meaning that:
        # no login required or login required AND user already lgged in.
        powdict = kwargs.get("powdict",None)
        session = powdict["SESSION"]
        is_logged_in = False
        if self.current_action in self.login_required:
            # login required, so check if user is logged in. 
            try:
                if session["user.id"] != 0:
                    return True
            except KeyError:
                    return False
       
        else:
            # no login required
            return True
        # by default return False
        return False
    
    def error(self, **kwargs):
        fname = os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)),"../views/error.tmpl"))
        mytemplate = Template(filename=fname, lookup=self.mylookup)
        return mytemplate.render(**kwargs)
        
        
    def setCurrentAction(self, action ):
        self.current_action = action
        